"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { changePassword } from "@/lib/api/user";
import { useAuthStore } from "@/store/auth-store";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogFooter,
} from "@/components/ui/dialog";

export default function ChangePasswordForm() {
    const router = useRouter();
    const logoutAllUser = useAuthStore((s) => s.logoutAllUser);
    const [currentPassword, setCurrentPassword] = useState("");
    const [newPassword, setNewPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [loading, setLoading] = useState(false);
    const [showLogoutDialog, setShowLogoutDialog] = useState(false);

    const handleChangePassword = async (e) => {
        e.preventDefault();

        // VALIDATION

        const passwordRegex = /^[^\s]+$/; // Kh√¥ng ch·ª©a kho·∫£ng tr·∫Øng

        if (!currentPassword || !newPassword || !confirmPassword) {
            toast.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng m·∫≠t kh·∫©u");
            return;
        }

        if (currentPassword.length < 8 || newPassword.length < 8) {
            toast.error("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±");
            return;
        }

        if (!passwordRegex.test(currentPassword) || !passwordRegex.test(newPassword)) {
            toast.error("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng");
            return;
        }

        if (newPassword === currentPassword) {
            toast.error("M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u hi·ªán t·∫°i");
            return;
        }

        if (newPassword !== confirmPassword) {
            toast.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
            return;
        }

        setLoading(true);
        const res = await changePassword(currentPassword, newPassword, confirmPassword);
        setLoading(false);

        if (res?.success) {
            toast.success("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng");
            setCurrentPassword("");
            setNewPassword("");
            setConfirmPassword("");
            setShowLogoutDialog(true);
        } else {
            toast.error(res?.error || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");
        }
    };


    const handleLogoutAll = async () => {
        setShowLogoutDialog(false);
        const res = await logoutAllUser();

        if (res?.success) {
            toast.success("ƒê√£ ƒëƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ thi·∫øt b·ªã");
            router.push("/");
        } else {
            toast.error("ƒêƒÉng xu·∫•t t·∫•t c·∫£ th·∫•t b·∫°i");
        }
    };

    return (
        <>
            {/* === Form ƒë·ªïi m·∫≠t kh·∫©u === */}
            <form onSubmit={handleChangePassword} className="space-y-4">
                <div>
                    <Label className="mb-1">M·∫≠t kh·∫©u hi·ªán t·∫°i</Label>
                    <Input
                        type="password"
                        value={currentPassword}
                        onChange={(e) => setCurrentPassword(e.target.value)}
                        required
                    />
                </div>
                <div>
                    <Label className="mb-1">M·∫≠t kh·∫©u m·ªõi</Label>
                    <Input
                        type="password"
                        value={newPassword}
                        onChange={(e) => setNewPassword(e.target.value)}
                        required
                    />
                </div>
                <div>
                    <Label className="mb-1">X√°c nh·∫≠n m·∫≠t kh·∫©u</Label>
                    <Input
                        type="password"
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        required
                    />
                </div>
                <Button
                    type="submit"
                    className="w-full bg-blue-600 text-white hover:bg-blue-500"
                    disabled={loading}
                >
                    {loading ? "ƒêang ƒë·ªïi..." : "X√°c nh·∫≠n ƒë·ªïi m·∫≠t kh·∫©u"}
                </Button>
            </form>

            <Dialog open={showLogoutDialog} onOpenChange={setShowLogoutDialog}>
                <DialogContent className="sm:max-w-[400px]">
                    <DialogHeader>
                        <DialogTitle>ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng üéâ</DialogTitle>
                        <DialogDescription>
                            B·∫°n c√≥ mu·ªën ƒëƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ c√°c thi·∫øt b·ªã kh√°c ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n kh√¥ng? S·∫Ω m·∫•t m·ªôt ch√∫t th·ªùi gian ƒë·ªÉ ƒëƒÉng xu·∫•t t·∫•t c·∫£.
                        </DialogDescription>
                    </DialogHeader>
                    <DialogFooter className="flex justify-end gap-2 mt-4">
                        <Button variant="outline" onClick={() => setShowLogoutDialog(false)}>
                            Gi·ªØ ƒëƒÉng nh·∫≠p
                        </Button>
                        <Button className="bg-red-600 hover:bg-red-500" onClick={handleLogoutAll}>
                            ƒêƒÉng xu·∫•t t·∫•t c·∫£
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </>
    );
}
